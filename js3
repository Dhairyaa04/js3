// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract ErrorHandlingExample {
    uint256 public count = 0;
    address public owner;

    constructor() {
        owner = msg.sender;
    }

    function incrementCount(uint256 value) external {
       
        require(msg.sender == owner, "Only the contract owner can increment the count");
        
       
        uint256 newCount = count + value;
        assert(newCount >= count); // Ensure no overflow
        
        count = newCount;
    }

    function assertExample(uint256 a, uint256 b) external pure returns (uint256) {
        
        assert(a != b);
        
        return a + b;
    }

    function revertExample(uint256 x) external pure returns (uint256) {
       
        require(x > 0, "Input must be greater than zero");
        
        if (x == 42) {
            revert("Input cannot be 42");
        }
        
        return x * 2;
    }
}
